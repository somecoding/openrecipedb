<?php


namespace OpenRecipeDB\V1\Rest\Recipes;


use Laminas\Hydrator\ReflectionHydrator;
use Laminas\Hydrator\Strategy\CollectionStrategy;
use OrdbModels\TypeAttribute;
use OrdbModels\Unit\Gramm;
use OrdbModels\Unit\Unit;
use phpDocumentor\Reflection\Types\Static_;

class RecipeHydrator extends ReflectionHydrator
{
    public function hydrate(\stdClass|array $data, object $object)
    {
        if($data instanceof \stdClass){
            $data = (array)$data;
        }

        $reflProperties = self::getReflProperties($object);
        foreach ($data as $key => $value) {

            $name = $this->hydrateName($key, $data);
            if (isset($reflProperties[$name])) {
                $reflProperties[$name]->setValue($object, $this->hydrateReflectionValue($name, $value, $reflProperties[$name], $data));
            }
        }
        return $object;
        $e =1;
        return $hydrated; // TODO: Change the autogenerated stub
    }
    public function hydrateReflectionValue(string $name, $value, \ReflectionProperty $reflectionProperty, ?array $data = null, ){
        $type = $reflectionProperty->getType();
        $doc = $reflectionProperty->getDocComment();
        $attrs = $reflectionProperty->getAttributes(TypeAttribute::class);
        $reflectionAttributes = null;
        if(count($attrs) > 0){
            foreach ($attrs as $reflectionAttribute){
                $reflectionAttributes = $reflectionAttribute->newInstance();
            }
        }
        $namedType = $type->getName();
        if(in_array($namedType, ['string', 'int', 'float'])){
            return $this->hydrateValue($name, $value, $data);
        }

        if($namedType === 'array' && $doc && str_contains($doc, '[]')){
            //we have an array of Objects declaration here
            $classname = null;
            $this->addStrategy($name, new CollectionStrategy($this,$reflectionAttributes->classname));
            return $this->hydrateValue($name, $value, $data);
        }elseif($namedType === 'DateInterval') {
            $e =1;
            return new \DateInterval('P1Y');//TODO
        }elseif($namedType === Unit::class) {
            $e = 1;
            return new Gramm();//TODO
        }


        else {
            try {
                $object = new $namedType;
            }catch (\Throwable $exception){
                $e = 1;
            }
            if($value === null && $type->allowsNull()){
                return null;
            }
            return $this->hydrate($value,$object);
            $e =1;
        }



        return $this->hydrateValue($name, $value, $data);

    }




}